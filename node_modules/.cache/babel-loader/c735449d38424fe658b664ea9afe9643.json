{"ast":null,"code":"const grpc = require(\"@grpc/grpc-js\");\n\nconst protoLoader = require('@grpc/proto-loader');\n\nconst {\n  ClarifaiChannel\n} = require(\"./custom-json-channel\");\n\nconst PROTO_PATH = __dirname + \"/../proto\";\nconst packageDefinition = protoLoader.loadSync([PROTO_PATH + \"/clarifai/api/status/status_code.proto\", PROTO_PATH + \"/clarifai/api/status/status.proto\", PROTO_PATH + \"/clarifai/api/resources.proto\", PROTO_PATH + \"/clarifai/api/service_processed.proto\"], {\n  keepCase: true,\n  longs: String,\n  enums: Number,\n  defaults: true,\n  oneofs: true\n}); // This is the JavaScript's best way of cloning an object.\n\nconst jsonPackageDefinition = JSON.parse(JSON.stringify(packageDefinition));\n/*\n * When sending the data over the JSON channel, if a concept doesn't have a value, the server defaults the value\n * to 1. With the gRPC channel however, all missing fields get a default value of 0. To do the same in JSON channel\n * what is done in the default gRPC channel, explicit 0 is set.\n *\n * Ideally this would be done dynamically by inspecting the \"cl_default_float\" custom option of the proto field, but\n * I'm not sure how to find out whether a field has this set or not.\n */\n\nfunction _recursivelyAddConceptValue(obj) {\n  if (obj.constructor === Array) {\n    for (const elem of obj) {\n      _recursivelyAddConceptValue(elem);\n    }\n  } else if (obj.constructor === Object) {\n    for (const key of Object.keys(obj)) {\n      if (key === \"concepts\") {\n        for (const concept of obj[\"concepts\"]) {\n          if (!concept.hasOwnProperty(\"value\")) {\n            concept[\"value\"] = 0;\n          }\n        }\n      } else if (key === \"concept\") {\n        const concept = obj[\"value\"];\n\n        if (!concept.hasOwnProperty(\"value\")) {\n          concept[\"value\"] = 0;\n        }\n      } else if (key === \"base64\") {// Skip base64 so we don't unnecessarily iterate over its long data array.\n      } else {\n        _recursivelyAddConceptValue(obj[key]);\n      }\n    }\n  }\n}\n\nclass ClarifaiStub {\n  static insecureGrpc() {\n    const grpcProtoDescriptor = grpc.loadPackageDefinition(packageDefinition);\n    return new grpcProtoDescriptor.clarifai.api.V2('api-grpc.clarifai.com:18080', grpc.credentials.createInsecure());\n  }\n\n  static json() {\n    const jsonService = jsonPackageDefinition[\"clarifai.api.V2\"];\n\n    for (const methodName in jsonService) {\n      if (jsonService.hasOwnProperty(methodName)) {\n        jsonService[methodName].requestSerialize = request => {\n          _recursivelyAddConceptValue(request);\n\n          return request;\n        };\n\n        jsonService[methodName].responseDeserialize = data => data;\n      }\n    }\n\n    const jsonProtoDescriptor = grpc.loadPackageDefinition(jsonPackageDefinition);\n    return new jsonProtoDescriptor.clarifai.api.V2('', null, {\n      channelOverride: ClarifaiChannel.makeJsonChannel()\n    });\n  }\n\n}\n\nmodule.exports = {\n  ClarifaiStub\n};","map":{"version":3,"sources":["E:/yudan/facerecognition/node_modules/clarifai-nodejs-grpc/src/index.js"],"names":["grpc","require","protoLoader","ClarifaiChannel","PROTO_PATH","__dirname","packageDefinition","loadSync","keepCase","longs","String","enums","Number","defaults","oneofs","jsonPackageDefinition","JSON","parse","stringify","_recursivelyAddConceptValue","obj","constructor","Array","elem","Object","key","keys","concept","hasOwnProperty","ClarifaiStub","insecureGrpc","grpcProtoDescriptor","loadPackageDefinition","clarifai","api","V2","credentials","createInsecure","json","jsonService","methodName","requestSerialize","request","responseDeserialize","data","jsonProtoDescriptor","channelOverride","makeJsonChannel","module","exports"],"mappings":"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","sourcesContent":["const grpc = require(\"@grpc/grpc-js\");\nconst protoLoader = require('@grpc/proto-loader');\n\nconst {ClarifaiChannel} = require(\"./custom-json-channel\");\n\nconst PROTO_PATH = __dirname + \"/../proto\";\n\nconst packageDefinition = protoLoader.loadSync(\n    [\n        PROTO_PATH + \"/clarifai/api/status/status_code.proto\",\n        PROTO_PATH + \"/clarifai/api/status/status.proto\",\n        PROTO_PATH + \"/clarifai/api/resources.proto\",\n        PROTO_PATH + \"/clarifai/api/service_processed.proto\",\n    ],\n    {\n        keepCase: true,\n        longs: String,\n        enums: Number,\n        defaults: true,\n        oneofs: true\n    }\n);\n\n// This is the JavaScript's best way of cloning an object.\nconst jsonPackageDefinition = JSON.parse(JSON.stringify(packageDefinition));\n\n/*\n * When sending the data over the JSON channel, if a concept doesn't have a value, the server defaults the value\n * to 1. With the gRPC channel however, all missing fields get a default value of 0. To do the same in JSON channel\n * what is done in the default gRPC channel, explicit 0 is set.\n *\n * Ideally this would be done dynamically by inspecting the \"cl_default_float\" custom option of the proto field, but\n * I'm not sure how to find out whether a field has this set or not.\n */\nfunction _recursivelyAddConceptValue(obj) {\n    if (obj.constructor === Array) {\n        for (const elem of obj) {\n            _recursivelyAddConceptValue(elem);\n        }\n    } else if (obj.constructor === Object) {\n        for (const key of Object.keys(obj)) {\n            if (key === \"concepts\") {\n                for (const concept of obj[\"concepts\"]) {\n                    if (!concept.hasOwnProperty(\"value\")) {\n                        concept[\"value\"] = 0;\n                    }\n                }\n            } else if (key === \"concept\") {\n                const concept = obj[\"value\"]\n                if (!concept.hasOwnProperty(\"value\")) {\n                    concept[\"value\"] = 0;\n                }\n            } else if (key === \"base64\") {\n                // Skip base64 so we don't unnecessarily iterate over its long data array.\n            } else {\n                _recursivelyAddConceptValue(obj[key]);\n            }\n        }\n    }\n}\n\nclass ClarifaiStub {\n    static insecureGrpc() {\n        const grpcProtoDescriptor = grpc.loadPackageDefinition(packageDefinition);\n        return new grpcProtoDescriptor.clarifai.api.V2('api-grpc.clarifai.com:18080', grpc.credentials.createInsecure());\n    }\n\n    static json() {\n        const jsonService = jsonPackageDefinition[\"clarifai.api.V2\"];\n        for (const methodName in jsonService) {\n            if (jsonService.hasOwnProperty(methodName)) {\n                jsonService[methodName].requestSerialize = (request) => {\n                    _recursivelyAddConceptValue(request);\n                    return request;\n                }\n                jsonService[methodName].responseDeserialize = (data) => data\n            }\n        }\n\n        const jsonProtoDescriptor = grpc.loadPackageDefinition(jsonPackageDefinition);\n        return new jsonProtoDescriptor.clarifai.api.V2('', null, {channelOverride: ClarifaiChannel.makeJsonChannel()});\n    }\n}\n\nmodule.exports = {ClarifaiStub};\n"]},"metadata":{},"sourceType":"script"}